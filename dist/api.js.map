{"version":3,"sources":["../src/api.js"],"names":["Api","validateProviders","args","providers","httpRequest","resource","data","map","provider","name","toLowerCase","id","invalid","filter","arg","indexOf","length","Error","join","getInfo","opts","baseUri","apiUri","apiResource","api","method","uri","params","req","Object","keys","body","qs","json"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;AAEe,MAAMA,GAAN,CAAU;;AAEvB,eAAaC,iBAAb,CAAgCC,IAAhC,EAAsC;AACpC,QAAIC,YAAY,MAAMH,IAAII,WAAJ,CAAgB,EAACC,UAAU,UAAX,EAAhB,CAAtB;AACAF,gBAAYA,UAAUG,IAAV,CAAeC,GAAf,CAAmBC,aAAa,EAACC,MAAMD,SAASC,IAAT,CAAcC,WAAd,EAAP,EAAoCC,IAAIH,SAASG,EAAjD,EAAb,CAAnB,CAAZ;AACA,UAAMC,UAAUV,KAAKW,MAAL,CAAYC,OAAOX,UAAUI,GAAV,CAAcC,YAAYA,SAASC,IAAnC,EAAyCM,OAAzC,CAAiDD,GAAjD,IAAwD,CAA3E,CAAhB;AACA,QAAIF,QAAQI,MAAZ,EAAoB;AAClB,YAAM,IAAIC,KAAJ,CAAW,uCAAsCL,QAAQM,IAAR,CAAa,IAAb,CAAmB,EAApE,CAAN;AACD;AACD,WAAOf,UAAUU,MAAV,CAAiBL,YAAYN,KAAKa,OAAL,CAAaP,SAASC,IAAtB,IAA8B,CAAC,CAA5D,CAAP;AACD;;AAED,eAAaU,OAAb,CAAsBhB,SAAtB,EAAiC;AAC/B,UAAMG,OAAO,MAAM,mBAAYH,UAAUI,GAAV,CAAcC,YAAYR,IAAII,WAAJ,CAAgB;AACvEC,gBAAW,UAASG,SAASG,EAAG;AADuC,KAAhB,CAA1B,CAAZ,CAAnB;AAGA,WAAOL,KAAKC,GAAL,CAASC,YAAYA,SAASF,IAA9B,CAAP;AACD;;AAED,SAAOF,WAAP,CAAoBgB,IAApB,EAA0B;AACxB,UAAM,EAACC,SAASC,MAAV,EAAkBjB,UAAUkB,WAA5B,KAA2CC,WAAjD;AACA,QAAI,EAACC,SAAS,KAAV,EAAiBC,MAAMJ,MAAvB,EAA+BjB,WAAWkB,WAA1C,EAAuDI,MAAvD,KAAiEP,IAArE;;AAEAM,WAAQ,IAAGrB,QAAS,EAApB;AACA,UAAMuB,MAAM,EAACF,GAAD,EAAZ;AACA,QAAIC,UAAUE,OAAOC,IAAP,CAAYH,MAAZ,EAAoBX,MAAlC,EAA0C;AACxC,cAAQS,MAAR;AACE,aAAK,OAAL;AACA,aAAK,MAAL;AACA,aAAK,KAAL;AAAcG,cAAIG,IAAJ,GAAWJ,MAAX,CAAmB;AACjC,aAAK,KAAL;AAAcC,cAAII,EAAJ,GAASL,MAAT,CAAiB;AAJjC;AAMD;;AAEDC,QAAIK,IAAJ,GAAW,IAAX;AACA,WAAO,8BAAGL,GAAH,CAAP;AACD;AApCsB;kBAAJ5B,G","file":"api.js","sourcesContent":["import {api} from './config';\nimport rp from 'request-promise';\n\nexport default class Api {\n  \n  static async validateProviders (args) {\n    let providers = await Api.httpRequest({resource: 'listings'});\n    providers = providers.data.map(provider => ({name: provider.name.toLowerCase(), id: provider.id}));\n    const invalid = args.filter(arg => providers.map(provider => provider.name).indexOf(arg) < 0);\n    if (invalid.length) {\n      throw new Error(`Invalid arguments in argument list: ${invalid.join(', ')}`);\n    }\n    return providers.filter(provider => args.indexOf(provider.name) > -1);\n  }\n\n  static async getInfo (providers) {\n    const data = await Promise.all(providers.map(provider => Api.httpRequest({\n      resource: `ticker/${provider.id}`\n    })));\n    return data.map(provider => provider.data);\n  }\n\n  static httpRequest (opts) {\n    const {baseUri: apiUri, resource: apiResource} = api;\n    let {method = 'GET', uri = apiUri, resource = apiResource, params} = opts;\n\n    uri += `/${resource}`;\n    const req = {uri};\n    if (params && Object.keys(params).length) {\n      switch (method) {\n        case 'PATCH':\n        case 'POST' :\n        case 'PUT'  : req.body = params; break; \n        case 'GET'  : req.qs = params; break;\n      }\n    }\n\n    req.json = true;\n    return rp(req);\n  }\n}"]}